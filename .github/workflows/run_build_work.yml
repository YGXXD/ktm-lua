# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: ktm-lua run build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_project: Xcode
            root: sudo
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_project: Unix\ Makefiles
            root: sudo
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cmake_project: Visual` Studio` 17` 2022
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_project: Unix` Makefiles 
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_project: Unix\ Makefiles
            root: sudo
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_project: Unix\ Makefiles
            root: sudo
        exclude:
          - os: macos-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
    
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        mkdir "${{ github.workspace }}/3rdparty"
        echo "build-3rdparty-dir=${{ github.workspace }}/3rdparty" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Lua (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install lua5.4 liblua5.4-dev

    - name: Install Lua (macOS)
      if: runner.os == 'macOS'
      run: brew install lua

    - name: Install Lua (Windows)
      if: runner.os == 'Windows'
      run: |
        if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        }
        scoop bucket add extras
        scoop install luarocks
        luarocks install lua-dev

    - name: Install ktm
      working-directory: ${{ steps.strings.outputs.build-3rdparty-dir }}
      run: |
        git clone https://github.com/YGXXD/ktm.git
        cd ktm
        cmake -B build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -S . -G ${{ matrix.cmake_project }}
        ${{ matrix.root }} cmake --install build --config Release

    - name: Install ntr
      working-directory: ${{ steps.strings.outputs.build-3rdparty-dir }}
      run: |
        git clone https://github.com/YGXXD/ntr.git
        cd ntr
        git checkout con
        cmake -B build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -S . -G ${{ matrix.cmake_project }}
        cmake --build build --config Release
        ${{ matrix.root }} cmake --install build --config Release

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DLUA_TEST_ENABLE=ON
        -S ${{ github.workspace }}
        -G ${{ matrix.cmake_project }}

    - name: Build
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest -V --output-on-failure --build-config ${{ matrix.build_type }}